
||| SERVER |||

<< NGINX SERVER >>

Offers the advantage of using static files with no problem . It was really annoying trying to configure to server static CSS in Django and my "simple python server"

- download mainlain version of nginx: https://nginx.org/en/download.html
- Go to the repertory where you downloaded it, copy the files 'mime.types' and 'nginx.conf' to your working directory where you have your html and css files.
- In 'nginx.conf' modify the line http location root, to the locantion of your http doc, coz' it was by default 'root http', now in my case is 'C:/Users/Liset/Desktop/NGINXTEST': 
	     
		 location / {
            root   C:/Users/Liset/Desktop/NGINXTEST;
            index  index.html index.htm;
        }

- Go to the repertory where your nginx files are (In my case C:\nginx-1.19.4), execute nginx.exe (At the end is something like this C:\nginx-1.19.4>nginx.exe) to run the server


<< DEPLOY DJANGO PROJECT WITH NGINX AND WSGI IN WINDOWS >> 

Most larger Django sites use a separate Web server – i.e., one that’s not also running Django – for serving static files. This server often runs a different type of web server – faster but less full-featured. (Ex: Nginx, Apache): https://docs.djangoproject.com/en/3.1/howto/static-files/deployment/

https://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html

https://www.youtube.com/watch?v=YnrgBeIRtvo&t=311s

https://www.youtube.com/watch?v=BBKq6H9Rm5g&t=293s --> NGINX + Waitress

En este caso la configuracion que se le hace a la aplicacion que vamos a introducir en Nginx (webproject_nginx.conf) sirve como portforwading;aqui decidi que el puerto por el que escucha es el 80, y puedo introducir cuantas app quiera, pero asignandoles otro puerto. En LAN si otro dispositivo se quiere conectar a mi app tiene que hacerlo en iptablet:80.

Nginx se comunica con Waitress, y Waitress se comunica con Wsgi.  si yo me quiero conectar en localhost voy a localhost:8080 o iptablet:8080. Que es el puerto que asignamos en Waitress. 

esta configuracion permite hacer un proxy, que comunica el puerto 80 de iptablet con el puerto 8080 de mi app. Entonces, si quieroservir los static files tengo que conectarme a localhost:80.

<< DEPLOY DJANGO WITH NGINX PROXY IN DOCKER CONTAINERS IN UBUNTU >>

https://www.youtube.com/watch?v=nh1ynJGJuT8&t=1094s  

1. Make project and all the docker configurations in VSC in WINDOWS.
2. Download Ubuntu and install it in a VM. Make sure to configurate your VM with bridge adapter and not NAT. 
 -- use WinSCP to transfer the project to the VM.
3. Use Putty for easier manipulation.
4. In Ubuntu (First steps):
 - sudo apt install python3-pip
 - python3 -m venv .web_project-env (creation of envirorment)
 - cd repertory-env/bin/activate (source-env is a hidden repertory, use     ls-la to see it).
 - source activate (activate envirorment)
 - pip install -r requirements.txt (this can take some time)
 - django-admin --version (to verify if it is installed)
 - In settings.py --> ALLOWED_HOSTS = ['vm_ip'])
 - python manage.py runserver ip_vm:8000 (lounch the server) --> I can access from any of the  machines in the LAN. 
5. Install docker:
sudo apt install docker.io
sudo systemctl status docker/sudo docker run hello-world/sudo docker images (to see if it works)
sudo apt install docker-compose
sudo docker-compose up (deploy project in developpement stage)
6. Follow the steps in the video to deploy de app in production stage with nginx. The only differente with the tutorial is that in settings.py i have to add the host ip, in my case --> ALLOWED_HOSTS = ['vm_ip'])




